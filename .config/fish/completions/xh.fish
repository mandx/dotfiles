complete -c xh -n "__fish_use_subcommand" -s A -l auth-type -d 'Specify the auth mechanism' -r -f -a "basic bearer"
complete -c xh -n "__fish_use_subcommand" -s a -l auth -d 'Authenticate as USER with PASS. PASS will be prompted if missing'
complete -c xh -n "__fish_use_subcommand" -l bearer -d 'Authenticate with a bearer token'
complete -c xh -n "__fish_use_subcommand" -s o -l output -d 'Save output to FILE instead of stdout'
complete -c xh -n "__fish_use_subcommand" -l max-redirects -d 'Number of redirects to follow, only respected if `follow` is set'
complete -c xh -n "__fish_use_subcommand" -s p -l print -d 'String specifying what the output should contain'
complete -c xh -n "__fish_use_subcommand" -l pretty -d 'Controls output processing' -r -f -a "all colors format none"
complete -c xh -n "__fish_use_subcommand" -s s -l style -d 'Output coloring style' -r -f -a "auto solarized"
complete -c xh -n "__fish_use_subcommand" -l proxy -d 'Use a proxy for a protocol. For example: `--proxy https:http://proxy.host:8080`'
complete -c xh -n "__fish_use_subcommand" -l default-scheme -d 'The default scheme to use if not specified in the URL'
complete -c xh -n "__fish_use_subcommand" -l verify -d 'If "no", skip SSL verification. If a file path, use it as a CA bundle'
complete -c xh -n "__fish_use_subcommand" -l cert -d 'Use a client side certificate for SSL'
complete -c xh -n "__fish_use_subcommand" -l cert-key -d 'A private key file to use with --cert'
complete -c xh -n "__fish_use_subcommand" -l offline -d 'Construct HTTP requests without sending them anywhere'
complete -c xh -n "__fish_use_subcommand" -s j -l json -d '(default) Serialize data items from the command line as a JSON object'
complete -c xh -n "__fish_use_subcommand" -s f -l form -d 'Serialize data items from the command line as form fields'
complete -c xh -n "__fish_use_subcommand" -s m -l multipart -d 'Like --form, but force a multipart/form-data request even without files'
complete -c xh -n "__fish_use_subcommand" -s I -l ignore-stdin -d 'Do not attempt to read stdin'
complete -c xh -n "__fish_use_subcommand" -s F -l follow -d 'Do follow redirects'
complete -c xh -n "__fish_use_subcommand" -s d -l download -d 'Download the body to a file instead of printing it'
complete -c xh -n "__fish_use_subcommand" -s h -l headers -d 'Print only the response headers, shortcut for --print=h'
complete -c xh -n "__fish_use_subcommand" -s b -l body -d 'Print only the response body, Shortcut for --print=b'
complete -c xh -n "__fish_use_subcommand" -s c -l continue -d 'Resume an interrupted download. Requires --download and --output'
complete -c xh -n "__fish_use_subcommand" -s v -l verbose -d 'Print the whole request as well as the response'
complete -c xh -n "__fish_use_subcommand" -s q -l quiet -d 'Do not print to stdout or stderr'
complete -c xh -n "__fish_use_subcommand" -s S -l stream -d 'Always stream the response body'
complete -c xh -n "__fish_use_subcommand" -l check-status -d 'Exit with an error status code if the server replies with an error'
complete -c xh -n "__fish_use_subcommand" -l curl -d 'Print a translation to a `curl` command'
complete -c xh -n "__fish_use_subcommand" -l curl-long -d 'Use the long versions of curl\'s flags'
complete -c xh -n "__fish_use_subcommand" -l https -d 'Make HTTPS requests if not specified in the URL'
complete -c xh -n "__fish_use_subcommand" -l help -d 'Prints help information'
complete -c xh -n "__fish_use_subcommand" -s V -l version -d 'Prints version information'
